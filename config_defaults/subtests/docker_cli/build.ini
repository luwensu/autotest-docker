[docker_cli/build]
subsubtests = local_path,https_file,git_path,rm_false,rm_false_nocache,
              bad,bad_quiet,bad_force_rm
__example__ = busybox_url
#: **Remote busybox location (if None the test tries to use /usr/sbin/busybox)**
busybox_url = http://www.busybox.net/downloads/binaries/latest/busybox-x86_64
#: ``docker build`` options as CSV list
docker_build_options = --rm=true,--no-cache=true,--quiet=false,--force-rm=false
#: Customize to match locally available resources
#: Paths to docker build contexts used by tests (built during setup)
source_dirs = full,part,bad
#: Fail test if expected containers do not exist after build completes.
#: When set ``yes``, expect all containers should still exist.
#: When set ``no`` (the default), expect no containers should exist.
#: When set ``LAST``, expect only the final container should exist
#: (e.g. on build failure)
intermediate_containers = no
#: ``docker build`` output message regex to match (positive test),
#: or not (negative test)
positive_build_regex = \s*Successfully built\s*(\w{64}|\w{12})
#: ``docker build`` output message regex to not match (positive test),
#: or match (negative test)
negative_build_regex = no such file or directory
#: A ``/`` + a relative path from test setup directory, to subdirectory
#: containing a ``Dockerfile`` (and it's context). Alternatively, a
#: ``http``/``ftp``/``git`` url accepted by the ``docker build`` command
#: (with out any ``/`` prefix).
dockerfile_dir_path =
#: Set to ``yes`` when ``dockerfile_dir_path`` is a writeable file, and test
#: should substitute default test repo into FROM statement.  Set to
#: ``no`` otherwise, or when ``dockerfile_dir_path`` is a remote
#: read-only resource.
use_config_repo = yes
#: Number of additional containers that should be present after build
additional_containers = 0



[docker_cli/build/local_path]
__example__ = dockerfile_dir_path
#: ``/`` + relative path from this tests setup path
dockerfile_dir_path = /full

[docker_cli/build/https_file]
__example__ = dockerfile_dir_path
use_config_repo = no
dockerfile_dir_path = https://raw.githubusercontent.com/autotest/autotest-docker/master/Dockerfile

[docker_cli/build/git_path]
__example__ = dockerfile_dir_path
use_config_repo = no
dockerfile_dir_path = github.com/jpetazzo/docker-busybox.git

[docker_cli/build/bad]
dockerfile_dir_path = /bad
intermediate_containers = LAST
# negative test
positive_build_regex = no such file or directory
negative_build_regex = \[/usr/sbin/busybox false\] returned a non-zero code
additional_containers = 1

[docker_cli/build/bad_quiet]
dockerfile_dir_path = /bad
docker_build_options = --rm=true,--no-cache=true,--quiet=true,--force-rm=false
intermediate_containers = LAST
# negative test
positive_build_regex = ^Ho ho ho!$
negative_build_regex = \[/usr/sbin/busybox false\] returned a non-zero code
additional_containers = 1

[docker_cli/build/bad_force_rm]
dockerfile_dir_path = /bad
docker_build_options = --rm=true,--no-cache=true,--quiet=false,--force-rm=true
# negative test
positive_build_regex = \s*Successfully built\s*(\w{64}|\w{12})
negative_build_regex = ^Ho ho ho!$
additional_containers = 0

[docker_cli/build/rm_false]
dockerfile_dir_path = /full
docker_build_options = --rm=false,--no-cache=true,--quiet=false,--force-rm=false
additional_containers = 6
intermediate_containers = yes

[docker_cli/build/cache]
dockerfile_dir_path = /part
#: Second build uses this path to check caching of first build
dockerfile_dir_path2 = /full
docker_build_options = --rm=true,--no-cache=true,--quiet=false,--force-rm=false
#: Options CSV for second build.
docker_build_options2 = --rm=true,--no-cache=false,--quiet=false,--force-rm=false
negative_build_regex = Using cache
#: Regular expression match for second build.
positive_build_regex2 = Using cache
