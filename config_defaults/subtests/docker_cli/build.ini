[docker_cli/build]
#: ``docker build`` options
docker_build_options = --rm=true
#: Customize to match locally available resources
__example__ = busybox_url
#: **Remote busybox location (if None the test tries to use /usr/sbin/busybox)**
busybox_url = http://www.busybox.net/downloads/binaries/latest/busybox-x86_64
#: Don't change this; paths to Dockerfiles used in test (prebuilt during setup)
source_dirs = full,part,bad
#: Maximal allowed duration of docker build
build_timeout_seconds = 120
subsubtests = local_path,https_file,git_path,rm_false,rm_false_nocache,bad,bad_quiet,bad_force_rm
#: Which containers should be exist (None/False=none,
#: LAST=only last one, True=all intermediary))
docker_build_intermediary_containers =
#: Expected ``docker build`` error message (used only if exit_code != 0)
docker_build_fail_msg =
#: A ``/`` + a relative path from test setup directory, to subdirectory containing a ``Dockerfile`` (and it's context).
#: Alternatively, a ``http``/``ftp``/``git`` url accepted by the ``docker build`` command (with out any ``/`` prefix).
dockerfile_dir_path =

[docker_cli/build/local_path]
__example__ = dockerfile_dir_path
#: ``/`` + relative path from this tests setup path
dockerfile_dir_path = /full
#: Set to ``yes`` to substitute the base-repo from the ``docker_repo_name`` option.
#: Otherwise, set ``no`` to use whatever is inside the ``dockerfile``.
dockerfile_use_config_repo = yes

[docker_cli/build/https_file]
__example__ = dockerfile_dir_path
#: **Specify path** to http/https based dockerfile (raw)
dockerfile_dir_path = https://raw.githubusercontent.com/autotest/autotest-docker/0.7.7/subtests/docker_cli/build_paths/simple/Dockerfile

[docker_cli/build/git_path]
__example__ = dockerfile_dir_path
#: **Specify path** to git based dockerfile
dockerfile_dir_path = github.com/jpetazzo/docker-busybox.git

[docker_cli/build/rm_false]
#: dockerfile path of the first build
dockerfile_dir_path = /part
#: dockerfile path of the second build
dockerfile_dir_path2 = /full
#: How many unique steps are in 1st vs. 2nd build
dockerfile_new_containers = 2
#: How many steps are there in dockerfile_path2 dockerfile
dockerfile_all_containers = 6
#: ``docker build`` options of the second build
docker_build_options2 = --rm=false
#: Set to ``yes`` to substitute the base-repo from the ``docker_repo_name`` option.
#: Otherwise, set ``no`` to use whatever is inside the ``dockerfile``.
dockerfile_use_config_repo = yes

[docker_cli/build/rm_false_nocache]
#: dockerfile path of the first build
dockerfile_dir_path = /part
#: dockerfile path of the second build
dockerfile_dir_path2 = /full
#: How many unique steps are in 1st vs. 2nd build
dockerfile_new_containers = 6
#: How many steps are there in the second build
dockerfile_all_containers = 6
#: ``docker build`` options of the second build
docker_build_options2 = --rm=false --no-cache=true
#: Set to ``yes`` to substitute the base-repo from the ``docker_repo_name`` option.
#: Otherwise, set ``no`` to use whatever is inside the ``dockerfile``.
dockerfile_use_config_repo = yes

[docker_cli/build/bad]
#: ``/`` + relative path from this tests setup path
dockerfile_dir_path = /bad
#: 'empty_base_image' expected fail message
#docker_build_fail_msg = exec: "/bin/sh": stat /bin/sh: no such file or directory
#: 'rhel7' image expected fail message, change it if it does not fit the current one
docker_build_fail_msg = [/bin/sh -c this_shoud_fail] returned a non-zero code: 127
docker_build_intermediary_containers = LAST
#: How many containers should exist after this test
dockerfile_new_containers = 1
#: How many containers are created with intermediary containers enabled
dockerfile_all_containers = 7
#: Expected string in stdout
docker_build_stdout = ^Ho ho ho!$
#: Set to ``yes`` to substitute the base-repo from the ``docker_repo_name`` option.
#: Otherwise, set ``no`` to use whatever is inside the ``dockerfile``.
dockerfile_use_config_repo = yes

[docker_cli/build/bad_force_rm]
#: ``/`` + relative path from this tests setup path
dockerfile_dir_path = /bad
docker_build_options = --force-rm
#: ``empty_base_image`` expected fail message
#docker_build_fail_msg = exec: "/bin/sh": stat /bin/sh: no such file or directory
#: ``rhel7`` image expected fail message, change it if it does not fit the current one
docker_build_fail_msg = [/bin/sh -c this_shoud_fail] returned a non-zero code: 127
#: Expected string in stdout
docker_build_stdout = ^Ho ho ho!$
#: Set to ``yes`` to substitute the base-repo from the ``docker_repo_name`` option.
#: Otherwise, set ``no`` to use whatever is inside the ``dockerfile``.
dockerfile_use_config_repo = yes

[docker_cli/build/bad_quiet]
#: ``/`` + relative path from this tests setup path
dockerfile_dir_path = /bad
docker_build_options = --rm --quiet
#: ``empty_base_image`` expected fail message
#docker_build_fail_msg = exec: "/bin/sh": stat /bin/sh: no such file or directory
#: ``rhel7`` image expected fail message, change it if it does not fit the current one
docker_build_fail_msg = [/bin/sh -c this_shoud_fail] returned a non-zero code: 127
docker_build_intermediary_containers = LAST
#: How many containers should exist after this test
dockerfile_new_containers = 1
#: How many containers are created with intermediary containers enabled
dockerfile_all_containers = 7
#: Forbidden stdout string
docker_build_no_stdout = ^Ho ho ho!$
#: Set to ``yes`` to substitute the base-repo from the ``docker_repo_name`` option.
#: Otherwise, set ``no`` to use whatever is inside the ``dockerfile``.
dockerfile_use_config_repo = yes
